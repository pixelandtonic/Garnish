{"version":3,"sources":["../lib/Base.js","../src/Garnish.js","../src/BaseDrag.js","../src/CheckboxSelect.js","../src/ContextMenu.js","../src/Drag.js","../src/DragDrop.js","../src/DragMove.js","../src/DragSort.js","../src/EscManager.js","../src/HUD.js","../src/Menu.js","../src/MenuBtn.js","../src/MixedInput.js","../src/Modal.js","../src/NiceText.js","../src/Pill.js","../src/Select.js","../src/SelectMenu.js","../src/ShortcutManager.js","garnish.js"],"names":["$","getErd","erd","elementResizeDetectorMaker","callOnAdd","triggerResizeEvent","elem","trigger","Base","extend","_instance","_static","prototype","_prototyping","proto","this","call","base","constructor","klass","_constructing","apply","arguments","ancestor","forEach","implement","toString","valueOf","type","init","source","value","length","test","method","previous","returnValue","toSource","hidden","i","key","desc","Object","getOwnPropertyDescriptor","defineProperty","version","object","block","context","undefined","String","Garnish","$win","window","$doc","document","$bod","body","rtl","hasClass","ltr","$scrollContainer","DELETE_KEY","SHIFT_KEY","CTRL_KEY","ALT_KEY","RETURN_KEY","ESC_KEY","SPACE_KEY","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","A_KEY","S_KEY","CMD_KEY","PRIMARY_CLICK","SECONDARY_CLICK","X_AXIS","Y_AXIS","FX_DURATION","TEXT_NODE","log","msg","console","_isMobileBrowser","_isMobileOrTabletBrowser","isMobileBrowser","detectTablets","a","navigator","userAgent","vendor","opera","RegExp","substr","isArray","val","Array","isJquery","jQuery","isString","hasAttr","attr","isTextNode","nodeType","getOffset","_offset","offset","top","scrollTop","left","scrollLeft","getDist","x1","y1","x2","y2","Math","sqrt","pow","hitTest","x","y","_$elem","_x1","_y1","_x2","outerWidth","_y2","outerHeight","isCursorOver","ev","pageX","pageY","copyTextStyles","target","$source","$target","css","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","textAlign","textIndent","whiteSpace","wordSpacing","wordWrap","getBodyScrollTop","_scrollTop","_maxScrollTop","height","requestAnimationFrame","raf","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","cancelAnimationFrame","cancel","mozCancelAnimationFrame","webkitCancelAnimationFrame","clearTimeout","id","scrollContainerToElement","container","$elem","$container","scrollParent","prop","elemScrollOffset","elemOffset","targetScrollTop","elemHeight","containerHeight","innerHeight","clientHeight","velocity","mobileHA","SHAKE_STEPS","SHAKE_STEP_DURATION","shake","startingPoint","parseInt","isNaN","_properties","getElement","makeArray","getInputBasename","name","replace","getInputPostVal","$input","findInputs","find","getPostData","inputName","postData","arrayInputCounters","$inputs","eq","inputVal","isArrayInput","croppedName","substring","j","copyInputValues","$sourceInputs","$targetInputs","isCtrlKeyPressed","platform","match","metaKey","ctrlKey","altKey","_eventHandlers","_normalizeEvents","events","split","on","data","handler","push","namespace","off","eventHandler","splice","settings","_namespace","_$listeners","_disabled","floor","random","_listeners","noop","setSettings","defaults","baseSettings","_ev","_splitEvents","trim","_formatEvents","slice","join","addListener","func","bind","proxy","inArray","removeListener","removeAllListeners","disable","enable","destroy","event","special","activate","setup","namespaces","eventHandle","mousedown.garnish-activate","e","preventDefault","click.garnish-activate","keydown.garnish-activate","keyCode","addClass","removeClass","removeAttr","teardown","textchange","handle","el","args","delay","handleObj","targetData","delayTimeout","resize","listenTo","each","BaseDrag","$items","dragging","mousedownX","mousedownY","realMouseX","realMouseY","mouseX","mouseY","mouseDistX","mouseDistY","mouseOffsetX","mouseOffsetY","$targetItem","scrollProperty","scrollAxis","scrollDist","scrollProxy","scrollFrame","_","items","isPlainObject","addItems","allowDragging","startDragging","onDragStart","drag","didMouseMove","_scrollProperty","axis","_winScrollTop","_minMouseScrollY","windowScrollTargetSize","_scrollAxis","_scrollDist","round","_maxMouseScrollY","_winScrollLeft","_minMouseScrollX","_maxMouseScrollX","width","_scrollWindow","_cancelWindowScroll","onDrag","stopDragging","onDragStop","item","removeItems","add","index","_deinitItem","removeAllItems","_handleMouseDown","which","$handle","_getItemHandle","currentTarget","is","closest","ignoreHandleSelector","_handleMouseMove","_mouseDist","minMouseDist","_handleMouseUp","scrollPos","removeData","CheckboxSelect","$all","$options","$checkboxes","filter","not","onAllChange","isAllChecked","checked","disabled","ContextMenu","options","$menu","showingMenu","counter","buildMenu","menuClass","$ul","appendTo","hasOwnProperty","option","$li","$a","label","onClick","mousedown","hideMenu","showMenu","showing","show","hide","Drag","targetItemWidth","targetItemHeight","targetItemPositionInDraggee","$draggee","otherItems","totalOtherItems","helpers","helperTargets","helperPositions","helperLagIncrement","updateHelperPosProxy","updateHelperPosFrame","lastMouseX","lastMouseY","_returningHelpersToDraggees","draggeeDisplay","setDraggee","findDraggee","_updateHelperPos","helperLagIncrementDividend","concat","toArray","singleHelper","_createHelper","removeDraggee","collapseDraggees","appendDraggee","$newDraggee","oldLength","newLength","draggeeVirtualMidpointX","draggeeVirtualMidpointY","getHelperTargetX","getHelperTargetY","returnHelpersToDraggees","$helper","display","visibility","callback","draggeeOffset","_showDraggee","onReturnHelpersToDraggees","$draggeeHelper","clone","copyDraggeeInputValuesToHelper","ceil","margin","pointer-events","helper","append","helperPos","_getHelperTarget","position","zIndex","helperBaseZindex","opacity","helperOpacity","_i","_j","_lag","helperLagBase","helperSpacingX","helperSpacingY","remove","DragDrop","$dropTargets","$activeDropTarget","updateDropTargets","dropTargets","_activeDropTarget","_elem","activeDropTargetClass","onDropTargetChange","fadeOutHelpers","duration","complete","DragMove","DragSort","$heightedContainer","$insertion","insertionVisible","oldDraggeeIndexes","newDraggeeIndexes","closestItem","_midpointVersion","_$prevItem","createInsertion","insertion","magnetStrength","_draggeeOffsetX","_draggeeOffsetY","canInsertBefore","$item","canInsertAfter","_getDraggeeIndexes","moveTargetItemToFront","_getItemIndex","first","insertBefore","_placeInsertionWithDraggee","_clearMidpoints","parent","_removeInsertion","_getClosestItem","_updateInsertion","insertAfter","onSortChange","onInsertionPointChange","indexes","_closestItem","_testForClosestItem","_midpoint","_getItemMidpoint","_startXDist","_lastXDist","abs","_startYDist","_lastYDist","_$otherItem","prev","_xDist","_yDist","last","next","_repositionDraggee","get","_moveDraggeeToItem","_$item","prependTo","_mouseDistX","_mouseDistY","_closestItemMouseDistY","_closestItemMouseDistX","EscManager","handlers","escapeLatest","register","obj","unregister","pop","escManager","HUD","$trigger","$fixedTriggerParent","$hud","$tip","$body","$header","$footer","$mainContainer","$main","$shade","orientation","updatingSizeAndPosition","windowWidth","windowHeight","mainWidth","mainHeight","bodyContents","onShow","onHide","onSubmit","activeHUDs","class","shadeClass","hudClass","tipClass","bodyClass","mainContainerClass","mainClass","updateBody","$parent","offsetParent","hideOnShadeClick","closeBtn","html","headerClass","footerClass","stopPropagation","closeOtherHUDs","hudID","shortcutManager","addLayer","hideOnEsc","registerShortcut","updateRecords","updateSizeAndPosition","changed","force","updateSizeAndPositionInternal","triggerWidth","triggerHeight","triggerOffset","windowScrollLeft","windowScrollTop","scrollContainerTriggerOffset","scrollContainerScrollLeft","scrollContainerScrollTop","hudBodyWidth","hudBodyHeight","right","bottom","overflow-x","overflow-y","clearances","orientations","relevantSize","windowSpacing","triggerSpacing","tipClasses","maxHudBodyWidth","maxHudBodyHeight","minBodyWidth","minBodyHeight","triggerCenter","maxLeft","minLeft","tipLeft","tipWidth","maxTop","minTop","tipTop","removeLayer","toggle","submit","_handleSubmit","Menu","visible","$anchor","menuId","_windowWidth","_windowHeight","_windowScrollLeft","_windowScrollTop","_anchorOffset","_anchorWidth","_anchorHeight","_anchorOffsetRight","_anchorOffsetBottom","_menuWidth","_menuHeight","addOptions","$menuList","role","aria-hidden","attachToElement","anchor","nodeName","optionKey","tabindex","selectOption","setPositionRelativeToAnchor","topClearance","bottomClearance","maxHeight","min","align","_alignCenter","rightClearance","leftClearance","_alignRight","_alignLeft","detach","onOptionSelect","selectedOption","MenuBtn","$btn","menu","btn","menuAnchor","aria-controls","aria-haspopup","aria-expanded","onMenuHide","onBlur","contains","activeElement","onKeyDown","$option","$currentOption","click","focusOption","onMouseDown","MixedInput","elements","focussedElement","blurTimeout","getElementIndex","isText","onFocus","setFocus","setCarotPos","addTextElement","text","TextElement","addElement","focussedElementIndex","selectionStart","selectionEnd","preVal","postVal","newText","removeElement","$prevElem","$nextElem","prevElemVal","newVal","blurFocussedElement","focus","focusPreviousElement","$from","focusNextElement","pos","parentInput","$stage","focussed","interval","padding","setWidth","getIndex","buildStage","getTextWidth","stageWidth","setInterval","checkInput","NiceText","clearInterval","getVal","setVal","onChange","Modal","dragger","desiredWidth","desiredHeight","resizeDragger","resizeStartWidth","resizeStartHeight","setContainer","autoShow","instances","draggable","dragHandleSelector","resizable","$resizeDragHandle","_handleResizeStart","_handleResize","closeOtherModals","visibleModal","onFadeIn","quickShow","onFadeOut","quickHide","max","min-width","min-height","_width","getWidth","minGutter","_height","getHeight","_handleWindowResize","relativeElemPadding","$hint","$charsLeft","autoHeight","maxLength","showCharsLeft","charsLeftPrefix","showingHint","inputBoxSizing","minHeight","initialized","input","isVisible","initialize","getHeightForValue","updateHeight","hint","$hintContainer","charsLeftClass","updateCharsLeft","initializeIfVisible","showHint","hintFadeDuration","hideHint","onTextChange","border-top","border-right","border-bottom","border-left","padding-top","padding-right","padding-bottom","padding-left","-webkit-box-sizing","-moz-box-sizing","box-sizing","spaces","onHeightChange","updateHeightIfWidthChanged","_charsLeft","negativeCharsLeftClass","Pill","$outerContainer","$innerContainer","$btns","$selectedBtn","outerContainer","preventOutlineOnMouseFocus","select","selectNext","nextIndex","_getSelectedBtnIndex","selectPrev","prevIndex","Select","$selectedItems","$focusedItem","mousedownTarget","mouseUpTimeout","callbackFrame","$focusable","$first","$last","allowEmpty","checkboxMode","ignoreClick","deselectAll","getItemIndex","isSelected","selectItem","preventScroll","multi","setFocusableItem","focusItem","_selectItems","selectAll","selectRange","sliceFrom","sliceTo","deselectItem","_deselectItems","clearFirst","deselectOthers","toggleItem","_canDeselect","clearMouseUpTimeout","getFirstItem","getLastItem","isPreviousItem","isNextItem","getPreviousItem","getNextItem","getItemToTheLeft","horizontal","vertical","getClosestItem","getItemToTheRight","getItemAbove","getItemBelow","dir","step","axisProps","closestItemAxisProps","dirProps","closestItemDirectionProps","$thisItem","thisOffset","thisMidpoint","midpointOffset","midpointSizeFunc","otherRowPos","smallestMidpointDiff","$closestItem","$otherItem","otherOffset","isNextRow","rowOffset","otherMidpoint","midpointDiff","isWrongDirection","getFurthestItemToTheLeft","getFurthestItem","getFurthestItemToTheRight","getFurthestItemAbove","getFurthestItemBelow","$testItem","totalSelected","getTotalSelected","updateIndexes","itemsChanged","selectionChanged","selectedIndex","selectedClass","onSelectionChange","resetItemOrder","getSelectedItems","shiftKey","_actAsCheckbox","onMouseUp","<","b",">","SelectMenu","selected","build","_addSelectedOptionClass","dom","ul","className","setBtnText","$btnLabel","ulClass","ShortcutManager","shortcuts","layer","shortcut","_normalizeShortcut","JSON","stringify","unregisterShortcut","ctrl","shift","triggerShortcut"],"mappings":"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","file":"garnish.min.js","sourcesContent":["/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n","/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        else {\n            // Both altKey and ctrlKey == true on some Windows keyboards when the right-hand ALT key is pressed\n            // so just be safe and make sure altKey == false\n            return (ev.ctrlKey && !ev.altKey);\n        }\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n","/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n","/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper\n                .outerWidth(Math.ceil($draggee.outerWidth()))\n                .outerHeight(Math.ceil($draggee.outerHeight()))\n                .css({margin: 0, 'pointer-events': 'none'});\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n","/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * ESC key manager class\n * @deprecated Use Garnish.ShortcutManager instead\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n","/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n\n            if (this.settings.hideOnShadeClick) {\n                this.addListener(this.$shade, 'tap,click', 'hide');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n            }\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            if (!this.showing) {\n                return;\n            }\n\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            delete Garnish.HUD.activeHUDs[this._namespace];\n            Garnish.shortcutManager.removeLayer();\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu\n */\nGarnish.Menu = Garnish.Base.extend(\n    {\n        settings: null,\n        visible: false,\n\n        $container: null,\n        $options: null,\n        $anchor: null,\n\n        menuId: null,\n\n        _windowWidth: null,\n        _windowHeight: null,\n        _windowScrollLeft: null,\n        _windowScrollTop: null,\n\n        _anchorOffset: null,\n        _anchorWidth: null,\n        _anchorHeight: null,\n        _anchorOffsetRight: null,\n        _anchorOffsetBottom: null,\n\n        _menuWidth: null,\n        _menuHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, settings) {\n            this.setSettings(settings, Garnish.Menu.defaults);\n\n            this.$container = $(container);\n\n            this.$options = $();\n            this.addOptions(this.$container.find('a'));\n\n            // Menu List\n            this.menuId = 'menu' + this._namespace;\n            this.$menuList = $('ul', this.$container);\n            this.$menuList.attr({\n                'role': 'listbox',\n                'id': this.menuId,\n                'aria-hidden': 'true'\n            });\n\n            // Deprecated\n            if (this.settings.attachToElement) {\n                this.settings.anchor = this.settings.attachToElement;\n                Garnish.log('The \\'attachToElement\\' setting is deprecated. Use \\'anchor\\' instead.');\n            }\n\n            if (this.settings.anchor) {\n                this.$anchor = $(this.settings.anchor);\n            }\n\n            // Prevent clicking on the container from hiding the menu\n            this.addListener(this.$container, 'mousedown', function(ev) {\n                ev.stopPropagation();\n\n                if (ev.target.nodeName !== 'INPUT') {\n                    // Prevent this from causing the menu button to blur\n                    ev.preventDefault();\n                }\n            });\n        },\n\n        addOptions: function($options) {\n            this.$options = this.$options.add($options);\n            $options.data('menu', this);\n\n            $options.each(function(optionKey, option) {\n                $(option).attr({\n                    'role': 'option',\n                    'tabindex': '-1',\n                    'id': this.menuId + '-option-' + optionKey\n                });\n            }.bind(this));\n\n            this.addListener($options, 'click', function(ev) {\n                this.selectOption(ev.currentTarget);\n            });\n        },\n\n        setPositionRelativeToAnchor: function() {\n            this._windowWidth = Garnish.$win.width();\n            this._windowHeight = Garnish.$win.height();\n            this._windowScrollLeft = Garnish.$win.scrollLeft();\n            this._windowScrollTop = Garnish.$win.scrollTop();\n\n            this._anchorOffset = this.$anchor.offset();\n            this._anchorWidth = this.$anchor.outerWidth();\n            this._anchorHeight = this.$anchor.outerHeight();\n            this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n            this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n            this.$container.css('minWidth', 0);\n            this.$container.css('minWidth', this._anchorWidth - (this.$container.outerWidth() - this.$container.width()));\n\n            this._menuWidth = this.$container.outerWidth();\n            this._menuHeight = this.$container.outerHeight();\n\n            // Is there room for the menu below the anchor?\n            var topClearance = this._anchorOffset.top - this._windowScrollTop,\n                bottomClearance = this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n            if (bottomClearance >= this._menuHeight || (topClearance < this._menuHeight && bottomClearance >= topClearance)) {\n                this.$container.css({\n                    top: this._anchorOffsetBottom,\n                    maxHeight: bottomClearance - this.settings.windowSpacing\n                });\n            } else {\n                this.$container.css({\n                    top: this._anchorOffset.top - Math.min(this._menuHeight, topClearance - this.settings.windowSpacing),\n                    maxHeight: topClearance - this.settings.windowSpacing\n                });\n            }\n\n            // Figure out how we're aliging it\n            var align = this.$container.data('align');\n\n            if (align !== 'left' && align !== 'center' && align !== 'right') {\n                align = 'left';\n            }\n\n            if (align === 'center') {\n                this._alignCenter();\n            }\n            else {\n                // Figure out which options are actually possible\n                var rightClearance = this._windowWidth + this._windowScrollLeft - (this._anchorOffset.left + this._menuWidth),\n                    leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n                if (align === 'right' && leftClearance >= 0 || rightClearance < 0) {\n                    this._alignRight();\n                }\n                else {\n                    this._alignLeft();\n                }\n            }\n\n            delete this._windowWidth;\n            delete this._windowHeight;\n            delete this._windowScrollLeft;\n            delete this._windowScrollTop;\n            delete this._anchorOffset;\n            delete this._anchorWidth;\n            delete this._anchorHeight;\n            delete this._anchorOffsetRight;\n            delete this._anchorOffsetBottom;\n            delete this._menuWidth;\n            delete this._menuHeight;\n        },\n\n        show: function() {\n            if (this.visible) {\n                return;\n            }\n\n            // Move the menu to the end of the DOM\n            this.$container.appendTo(Garnish.$bod);\n\n            if (this.$anchor) {\n                this.setPositionRelativeToAnchor();\n            }\n\n            this.$container.velocity('stop');\n            this.$container.css({\n                opacity: 1,\n                display: 'block'\n            });\n\n            this.$menuList.attr('aria-hidden', 'false');\n\n            Garnish.shortcutManager\n                .addLayer()\n                .registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n\n            this.addListener(Garnish.$scrollContainer, 'scroll', 'setPositionRelativeToAnchor');\n\n            this.visible = true;\n            this.trigger('show');\n        },\n\n        hide: function() {\n            if (!this.visible) {\n                return;\n            }\n\n            this.$menuList.attr('aria-hidden', 'true');\n\n            this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION}, function() {\n                this.$container.detach();\n            }.bind(this));\n\n            Garnish.shortcutManager.removeLayer();\n            this.removeListener(Garnish.$scrollContainer, 'scroll');\n            this.visible = false;\n            this.trigger('hide');\n        },\n\n        selectOption: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionselect', {selectedOption: option});\n            this.hide();\n        },\n\n        _alignLeft: function() {\n            this.$container.css({\n                left: this._anchorOffset.left,\n                right: 'auto'\n            });\n        },\n\n        _alignRight: function() {\n            this.$container.css({\n                right: this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n                left: 'auto'\n            });\n        },\n\n        _alignCenter: function() {\n            var left = Math.round((this._anchorOffset.left + this._anchorWidth / 2) - (this._menuWidth / 2));\n\n            if (left < 0) {\n                left = 0;\n            }\n\n            this.$container.css('left', left);\n        }\n\n    },\n    {\n        defaults: {\n            anchor: null,\n            windowSpacing: 5,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.Menu($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'aria-controls': this.menu.menuId,\n                'aria-haspopup': 'listbox',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    var $currentOption = this.menu.$options.filter('.hover');\n\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (!this.showingMenu) {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n            this.$btn.attr('aria-expanded', 'false');\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n","/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                Garnish.shortcutManager.addLayer();\n\n                if (this.settings.hideOnEsc) {\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n                }\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            if (!this.visible) {\n                return;\n            }\n\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n            Garnish.shortcutManager.removeLayer();\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n","/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: null,\n        charsLeftPrefix: null,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n                this.charsLeftPrefix = this.$input.attr('data-chars-left-prefix') || '';\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div aria-live=\"polite\" class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.html('<span class=\"visually-hidden\">' + this.charsLeftPrefix + '</span>' + this.updateCharsLeft._charsLeft);\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Pill\n */\nGarnish.Pill = Garnish.Base.extend(\n    {\n        $outerContainer: null,\n        $innerContainer: null,\n        $btns: null,\n        $selectedBtn: null,\n        $input: null,\n\n        init: function(outerContainer) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a pill?\n            if (this.$outerContainer.data('pill')) {\n                Garnish.log('Double-instantiating a pill on an element');\n                this.$outerContainer.data('pill').destroy();\n            }\n\n            this.$outerContainer.data('pill', this);\n\n            this.$innerContainer = this.$outerContainer.find('.btngroup:first');\n            this.$btns = this.$innerContainer.find('.btn');\n            this.$selectedBtn = this.$btns.filter('.active:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            Garnish.preventOutlineOnMouseFocus(this.$innerContainer);\n            this.addListener(this.$btns, 'mousedown', 'onMouseDown');\n            this.addListener(this.$innerContainer, 'keydown', 'onKeyDown');\n        },\n\n        select: function(btn) {\n            this.$selectedBtn.removeClass('active');\n            var $btn = $(btn);\n            $btn.addClass('active');\n            this.$input.val($btn.attr('data-value'));\n            this.$selectedBtn = $btn;\n        },\n\n        selectNext: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[this.$btns.length - 1]);\n            }\n            else {\n                var nextIndex = this._getSelectedBtnIndex() + 1;\n\n                if (typeof this.$btns[nextIndex] !== 'undefined') {\n                    this.select(this.$btns[nextIndex]);\n                }\n            }\n        },\n\n        selectPrev: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[0]);\n            }\n            else {\n                var prevIndex = this._getSelectedBtnIndex() - 1;\n\n                if (typeof this.$btns[prevIndex] !== 'undefined') {\n                    this.select(this.$btns[prevIndex]);\n                }\n            }\n        },\n\n        onMouseDown: function(ev) {\n            this.select(ev.currentTarget);\n        },\n\n        _getSelectedBtnIndex: function() {\n            if (typeof this.$selectedBtn[0] !== 'undefined') {\n                return $.inArray(this.$selectedBtn[0], this.$btns);\n            }\n            else {\n                return -1;\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RIGHT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectNext();\n                    }\n                    else {\n                        this.selectPrev();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n\n                case Garnish.LEFT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectPrev();\n                    }\n                    else {\n                        this.selectNext();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$outerContainer.removeData('pill');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            if (preventScroll) {\n                var scrollLeft = Garnish.$scrollContainer.scrollLeft(),\n                    scrollTop = Garnish.$scrollContainer.scrollTop();\n                $item.focus();\n                Garnish.$scrollContainer.scrollLeft(scrollLeft).scrollTop(scrollTop);\n            }\n            else {\n                $item.focus();\n            }\n\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.Menu.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Keyboard shortcut manager class\n *\n * This can be used to map keyboard events to the current UI \"layer\" (whether that's the base document,\n * a modal, an HUD, or a menu).\n */\nGarnish.ShortcutManager = Garnish.Base.extend(\n    {\n        shortcuts: null,\n        layer: 0,\n\n        init: function() {\n            this.shortcuts = [[]];\n            this.addListener(Garnish.$bod, 'keydown', 'triggerShortcut');\n        },\n\n        addLayer: function() {\n            this.layer++;\n            this.shortcuts.push([]);\n            return this;\n        },\n\n        removeLayer: function() {\n            if (this.layer === 0) {\n                throw 'Can’t remove the base layer.';\n            }\n            this.layer--;\n            this.shortcuts.pop();\n            return this;\n        },\n\n        registerShortcut: function(shortcut, callback) {\n            shortcut = this._normalizeShortcut(shortcut);\n            this.shortcuts[this.layer].push({\n                key: JSON.stringify(shortcut),\n                shortcut: shortcut,\n                callback: callback,\n            });\n            return this;\n        },\n\n        unregisterShortcut: function(shortcut) {\n            shortcut = this._normalizeShortcut(shortcut);\n            var key = JSON.stringify(shortcut);\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                if (this.shortcuts[this.layer][i].key === key) {\n                    this.shortcuts[this.layer].splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        },\n\n        _normalizeShortcut: function(shortcut) {\n            if (typeof shortcut === 'number') {\n                shortcut = {keyCode: shortcut};\n            }\n\n            if (typeof shortcut.keyCode !== 'number') {\n                throw 'Invalid shortcut';\n            }\n\n            return {\n                keyCode: shortcut.keyCode,\n                ctrl: !!shortcut.ctrl,\n                shift: !!shortcut.shift,\n            };\n        },\n\n        triggerShortcut: function(ev) {\n            var shortcut;\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                shortcut = this.shortcuts[this.layer][i].shortcut;\n                if (\n                    shortcut.keyCode === ev.keyCode &&\n                    shortcut.ctrl === Garnish.isCtrlKeyPressed(ev) &&\n                    shortcut.shift === ev.shiftKey\n                ) {\n                    ev.preventDefault();\n                    this.shortcuts[this.layer][i].callback(ev);\n                    break;\n                }\n            }\n        },\n    }\n);\n\nGarnish.shortcutManager = new Garnish.ShortcutManager();\n","/**\n * Garnish UI toolkit\n *\n * @copyright 2013 Pixel & Tonic, Inc.. All rights reserved.\n * @author    Brandon Kelly <brandon@pixelandtonic.com>\n * @version   0.1\n * @license   MIT\n */\n(function($){\n\n/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n\n/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        else {\n            // Both altKey and ctrlKey == true on some Windows keyboards when the right-hand ALT key is pressed\n            // so just be safe and make sure altKey == false\n            return (ev.ctrlKey && !ev.altKey);\n        }\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n\n/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper\n                .outerWidth(Math.ceil($draggee.outerWidth()))\n                .outerHeight(Math.ceil($draggee.outerHeight()))\n                .css({margin: 0, 'pointer-events': 'none'});\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n\n/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * ESC key manager class\n * @deprecated Use Garnish.ShortcutManager instead\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n\n/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n\n            if (this.settings.hideOnShadeClick) {\n                this.addListener(this.$shade, 'tap,click', 'hide');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n            }\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            if (!this.showing) {\n                return;\n            }\n\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            delete Garnish.HUD.activeHUDs[this._namespace];\n            Garnish.shortcutManager.removeLayer();\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu\n */\nGarnish.Menu = Garnish.Base.extend(\n    {\n        settings: null,\n        visible: false,\n\n        $container: null,\n        $options: null,\n        $anchor: null,\n\n        menuId: null,\n\n        _windowWidth: null,\n        _windowHeight: null,\n        _windowScrollLeft: null,\n        _windowScrollTop: null,\n\n        _anchorOffset: null,\n        _anchorWidth: null,\n        _anchorHeight: null,\n        _anchorOffsetRight: null,\n        _anchorOffsetBottom: null,\n\n        _menuWidth: null,\n        _menuHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, settings) {\n            this.setSettings(settings, Garnish.Menu.defaults);\n\n            this.$container = $(container);\n\n            this.$options = $();\n            this.addOptions(this.$container.find('a'));\n\n            // Menu List\n            this.menuId = 'menu' + this._namespace;\n            this.$menuList = $('ul', this.$container);\n            this.$menuList.attr({\n                'role': 'listbox',\n                'id': this.menuId,\n                'aria-hidden': 'true'\n            });\n\n            // Deprecated\n            if (this.settings.attachToElement) {\n                this.settings.anchor = this.settings.attachToElement;\n                Garnish.log('The \\'attachToElement\\' setting is deprecated. Use \\'anchor\\' instead.');\n            }\n\n            if (this.settings.anchor) {\n                this.$anchor = $(this.settings.anchor);\n            }\n\n            // Prevent clicking on the container from hiding the menu\n            this.addListener(this.$container, 'mousedown', function(ev) {\n                ev.stopPropagation();\n\n                if (ev.target.nodeName !== 'INPUT') {\n                    // Prevent this from causing the menu button to blur\n                    ev.preventDefault();\n                }\n            });\n        },\n\n        addOptions: function($options) {\n            this.$options = this.$options.add($options);\n            $options.data('menu', this);\n\n            $options.each(function(optionKey, option) {\n                $(option).attr({\n                    'role': 'option',\n                    'tabindex': '-1',\n                    'id': this.menuId + '-option-' + optionKey\n                });\n            }.bind(this));\n\n            this.addListener($options, 'click', function(ev) {\n                this.selectOption(ev.currentTarget);\n            });\n        },\n\n        setPositionRelativeToAnchor: function() {\n            this._windowWidth = Garnish.$win.width();\n            this._windowHeight = Garnish.$win.height();\n            this._windowScrollLeft = Garnish.$win.scrollLeft();\n            this._windowScrollTop = Garnish.$win.scrollTop();\n\n            this._anchorOffset = this.$anchor.offset();\n            this._anchorWidth = this.$anchor.outerWidth();\n            this._anchorHeight = this.$anchor.outerHeight();\n            this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n            this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n            this.$container.css('minWidth', 0);\n            this.$container.css('minWidth', this._anchorWidth - (this.$container.outerWidth() - this.$container.width()));\n\n            this._menuWidth = this.$container.outerWidth();\n            this._menuHeight = this.$container.outerHeight();\n\n            // Is there room for the menu below the anchor?\n            var topClearance = this._anchorOffset.top - this._windowScrollTop,\n                bottomClearance = this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n            if (bottomClearance >= this._menuHeight || (topClearance < this._menuHeight && bottomClearance >= topClearance)) {\n                this.$container.css({\n                    top: this._anchorOffsetBottom,\n                    maxHeight: bottomClearance - this.settings.windowSpacing\n                });\n            } else {\n                this.$container.css({\n                    top: this._anchorOffset.top - Math.min(this._menuHeight, topClearance - this.settings.windowSpacing),\n                    maxHeight: topClearance - this.settings.windowSpacing\n                });\n            }\n\n            // Figure out how we're aliging it\n            var align = this.$container.data('align');\n\n            if (align !== 'left' && align !== 'center' && align !== 'right') {\n                align = 'left';\n            }\n\n            if (align === 'center') {\n                this._alignCenter();\n            }\n            else {\n                // Figure out which options are actually possible\n                var rightClearance = this._windowWidth + this._windowScrollLeft - (this._anchorOffset.left + this._menuWidth),\n                    leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n                if (align === 'right' && leftClearance >= 0 || rightClearance < 0) {\n                    this._alignRight();\n                }\n                else {\n                    this._alignLeft();\n                }\n            }\n\n            delete this._windowWidth;\n            delete this._windowHeight;\n            delete this._windowScrollLeft;\n            delete this._windowScrollTop;\n            delete this._anchorOffset;\n            delete this._anchorWidth;\n            delete this._anchorHeight;\n            delete this._anchorOffsetRight;\n            delete this._anchorOffsetBottom;\n            delete this._menuWidth;\n            delete this._menuHeight;\n        },\n\n        show: function() {\n            if (this.visible) {\n                return;\n            }\n\n            // Move the menu to the end of the DOM\n            this.$container.appendTo(Garnish.$bod);\n\n            if (this.$anchor) {\n                this.setPositionRelativeToAnchor();\n            }\n\n            this.$container.velocity('stop');\n            this.$container.css({\n                opacity: 1,\n                display: 'block'\n            });\n\n            this.$menuList.attr('aria-hidden', 'false');\n\n            Garnish.shortcutManager\n                .addLayer()\n                .registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n\n            this.addListener(Garnish.$scrollContainer, 'scroll', 'setPositionRelativeToAnchor');\n\n            this.visible = true;\n            this.trigger('show');\n        },\n\n        hide: function() {\n            if (!this.visible) {\n                return;\n            }\n\n            this.$menuList.attr('aria-hidden', 'true');\n\n            this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION}, function() {\n                this.$container.detach();\n            }.bind(this));\n\n            Garnish.shortcutManager.removeLayer();\n            this.removeListener(Garnish.$scrollContainer, 'scroll');\n            this.visible = false;\n            this.trigger('hide');\n        },\n\n        selectOption: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionselect', {selectedOption: option});\n            this.hide();\n        },\n\n        _alignLeft: function() {\n            this.$container.css({\n                left: this._anchorOffset.left,\n                right: 'auto'\n            });\n        },\n\n        _alignRight: function() {\n            this.$container.css({\n                right: this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n                left: 'auto'\n            });\n        },\n\n        _alignCenter: function() {\n            var left = Math.round((this._anchorOffset.left + this._anchorWidth / 2) - (this._menuWidth / 2));\n\n            if (left < 0) {\n                left = 0;\n            }\n\n            this.$container.css('left', left);\n        }\n\n    },\n    {\n        defaults: {\n            anchor: null,\n            windowSpacing: 5,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.Menu($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'aria-controls': this.menu.menuId,\n                'aria-haspopup': 'listbox',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    var $currentOption = this.menu.$options.filter('.hover');\n\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (!this.showingMenu) {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n            this.$btn.attr('aria-expanded', 'false');\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n\n/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                Garnish.shortcutManager.addLayer();\n\n                if (this.settings.hideOnEsc) {\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n                }\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            if (!this.visible) {\n                return;\n            }\n\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n            Garnish.shortcutManager.removeLayer();\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n\n/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: null,\n        charsLeftPrefix: null,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n                this.charsLeftPrefix = this.$input.attr('data-chars-left-prefix') || '';\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div aria-live=\"polite\" class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.html('<span class=\"visually-hidden\">' + this.charsLeftPrefix + '</span>' + this.updateCharsLeft._charsLeft);\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Pill\n */\nGarnish.Pill = Garnish.Base.extend(\n    {\n        $outerContainer: null,\n        $innerContainer: null,\n        $btns: null,\n        $selectedBtn: null,\n        $input: null,\n\n        init: function(outerContainer) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a pill?\n            if (this.$outerContainer.data('pill')) {\n                Garnish.log('Double-instantiating a pill on an element');\n                this.$outerContainer.data('pill').destroy();\n            }\n\n            this.$outerContainer.data('pill', this);\n\n            this.$innerContainer = this.$outerContainer.find('.btngroup:first');\n            this.$btns = this.$innerContainer.find('.btn');\n            this.$selectedBtn = this.$btns.filter('.active:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            Garnish.preventOutlineOnMouseFocus(this.$innerContainer);\n            this.addListener(this.$btns, 'mousedown', 'onMouseDown');\n            this.addListener(this.$innerContainer, 'keydown', 'onKeyDown');\n        },\n\n        select: function(btn) {\n            this.$selectedBtn.removeClass('active');\n            var $btn = $(btn);\n            $btn.addClass('active');\n            this.$input.val($btn.attr('data-value'));\n            this.$selectedBtn = $btn;\n        },\n\n        selectNext: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[this.$btns.length - 1]);\n            }\n            else {\n                var nextIndex = this._getSelectedBtnIndex() + 1;\n\n                if (typeof this.$btns[nextIndex] !== 'undefined') {\n                    this.select(this.$btns[nextIndex]);\n                }\n            }\n        },\n\n        selectPrev: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[0]);\n            }\n            else {\n                var prevIndex = this._getSelectedBtnIndex() - 1;\n\n                if (typeof this.$btns[prevIndex] !== 'undefined') {\n                    this.select(this.$btns[prevIndex]);\n                }\n            }\n        },\n\n        onMouseDown: function(ev) {\n            this.select(ev.currentTarget);\n        },\n\n        _getSelectedBtnIndex: function() {\n            if (typeof this.$selectedBtn[0] !== 'undefined') {\n                return $.inArray(this.$selectedBtn[0], this.$btns);\n            }\n            else {\n                return -1;\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RIGHT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectNext();\n                    }\n                    else {\n                        this.selectPrev();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n\n                case Garnish.LEFT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectPrev();\n                    }\n                    else {\n                        this.selectNext();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$outerContainer.removeData('pill');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            if (preventScroll) {\n                var scrollLeft = Garnish.$scrollContainer.scrollLeft(),\n                    scrollTop = Garnish.$scrollContainer.scrollTop();\n                $item.focus();\n                Garnish.$scrollContainer.scrollLeft(scrollLeft).scrollTop(scrollTop);\n            }\n            else {\n                $item.focus();\n            }\n\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.Menu.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Keyboard shortcut manager class\n *\n * This can be used to map keyboard events to the current UI \"layer\" (whether that's the base document,\n * a modal, an HUD, or a menu).\n */\nGarnish.ShortcutManager = Garnish.Base.extend(\n    {\n        shortcuts: null,\n        layer: 0,\n\n        init: function() {\n            this.shortcuts = [[]];\n            this.addListener(Garnish.$bod, 'keydown', 'triggerShortcut');\n        },\n\n        addLayer: function() {\n            this.layer++;\n            this.shortcuts.push([]);\n            return this;\n        },\n\n        removeLayer: function() {\n            if (this.layer === 0) {\n                throw 'Can’t remove the base layer.';\n            }\n            this.layer--;\n            this.shortcuts.pop();\n            return this;\n        },\n\n        registerShortcut: function(shortcut, callback) {\n            shortcut = this._normalizeShortcut(shortcut);\n            this.shortcuts[this.layer].push({\n                key: JSON.stringify(shortcut),\n                shortcut: shortcut,\n                callback: callback,\n            });\n            return this;\n        },\n\n        unregisterShortcut: function(shortcut) {\n            shortcut = this._normalizeShortcut(shortcut);\n            var key = JSON.stringify(shortcut);\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                if (this.shortcuts[this.layer][i].key === key) {\n                    this.shortcuts[this.layer].splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        },\n\n        _normalizeShortcut: function(shortcut) {\n            if (typeof shortcut === 'number') {\n                shortcut = {keyCode: shortcut};\n            }\n\n            if (typeof shortcut.keyCode !== 'number') {\n                throw 'Invalid shortcut';\n            }\n\n            return {\n                keyCode: shortcut.keyCode,\n                ctrl: !!shortcut.ctrl,\n                shift: !!shortcut.shift,\n            };\n        },\n\n        triggerShortcut: function(ev) {\n            var shortcut;\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                shortcut = this.shortcuts[this.layer][i].shortcut;\n                if (\n                    shortcut.keyCode === ev.keyCode &&\n                    shortcut.ctrl === Garnish.isCtrlKeyPressed(ev) &&\n                    shortcut.shift === ev.shiftKey\n                ) {\n                    ev.preventDefault();\n                    this.shortcuts[this.layer][i].callback(ev);\n                    break;\n                }\n            }\n        },\n    }\n);\n\nGarnish.shortcutManager = new Garnish.ShortcutManager();\n\n})(jQuery);\n"]}