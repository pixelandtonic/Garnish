{"version":3,"sources":["../lib/Base.js","../src/Garnish.js","../src/BaseDrag.js","../src/CheckboxSelect.js","../src/ContextMenu.js","../src/Drag.js","../src/DragDrop.js","../src/DragMove.js","../src/DragSort.js","../src/EscManager.js","../src/HUD.js","../src/Menu.js","../src/MenuBtn.js","../src/MixedInput.js","../src/Modal.js","../src/NiceText.js","../src/Pill.js","../src/Select.js","../src/SelectMenu.js","garnish.js"],"names":["$","getErd","erd","elementResizeDetectorMaker","callOnAdd","triggerResizeEvent","elem","trigger","Base","extend","_instance","_static","prototype","_prototyping","proto","this","call","base","constructor","klass","_constructing","apply","arguments","ancestor","forEach","implement","toString","valueOf","type","init","source","value","length","test","method","previous","returnValue","toSource","hidden","i","key","desc","Object","getOwnPropertyDescriptor","defineProperty","version","object","block","context","undefined","String","Garnish","$win","window","$doc","document","$bod","body","rtl","hasClass","ltr","$scrollContainer","DELETE_KEY","SHIFT_KEY","CTRL_KEY","ALT_KEY","RETURN_KEY","ESC_KEY","SPACE_KEY","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","A_KEY","S_KEY","CMD_KEY","PRIMARY_CLICK","SECONDARY_CLICK","X_AXIS","Y_AXIS","FX_DURATION","TEXT_NODE","log","msg","console","_isMobileBrowser","_isMobileOrTabletBrowser","isMobileBrowser","detectTablets","a","navigator","userAgent","vendor","opera","RegExp","substr","isArray","val","Array","isJquery","jQuery","isString","hasAttr","attr","isTextNode","nodeType","getOffset","_offset","offset","top","scrollTop","left","scrollLeft","getDist","x1","y1","x2","y2","Math","sqrt","pow","hitTest","x","y","_$elem","_x1","_y1","_x2","outerWidth","_y2","outerHeight","isCursorOver","ev","pageX","pageY","copyTextStyles","target","$source","$target","css","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","textAlign","textIndent","whiteSpace","wordSpacing","wordWrap","getBodyScrollTop","_scrollTop","_maxScrollTop","height","requestAnimationFrame","raf","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","cancelAnimationFrame","cancel","mozCancelAnimationFrame","webkitCancelAnimationFrame","clearTimeout","id","scrollContainerToElement","container","$elem","$container","scrollParent","prop","elemScrollOffset","elemOffset","targetScrollTop","elemHeight","containerHeight","innerHeight","clientHeight","velocity","mobileHA","SHAKE_STEPS","SHAKE_STEP_DURATION","shake","startingPoint","parseInt","isNaN","_properties","getElement","makeArray","getInputBasename","name","replace","getInputPostVal","$input","findInputs","find","getPostData","inputName","postData","arrayInputCounters","$inputs","eq","inputVal","isArrayInput","croppedName","substring","j","copyInputValues","$sourceInputs","$targetInputs","isCtrlKeyPressed","platform","match","metaKey","ctrlKey","altKey","_eventHandlers","_normalizeEvents","events","split","on","data","handler","push","namespace","off","eventHandler","splice","settings","_namespace","_$listeners","_disabled","floor","random","_listeners","noop","setSettings","defaults","baseSettings","_ev","_splitEvents","trim","_formatEvents","slice","join","addListener","func","bind","proxy","inArray","removeListener","removeAllListeners","disable","enable","destroy","event","special","activate","setup","namespaces","eventHandle","mousedown.garnish-activate","e","preventDefault","click.garnish-activate","keydown.garnish-activate","keyCode","addClass","removeClass","removeAttr","teardown","textchange","handle","el","args","delay","handleObj","targetData","delayTimeout","resize","listenTo","each","BaseDrag","$items","dragging","mousedownX","mousedownY","realMouseX","realMouseY","mouseX","mouseY","mouseDistX","mouseDistY","mouseOffsetX","mouseOffsetY","$targetItem","scrollProperty","scrollAxis","scrollDist","scrollProxy","scrollFrame","_","items","isPlainObject","addItems","allowDragging","startDragging","onDragStart","drag","didMouseMove","_scrollProperty","axis","_winScrollTop","_minMouseScrollY","windowScrollTargetSize","_scrollAxis","_scrollDist","round","_maxMouseScrollY","_winScrollLeft","_minMouseScrollX","_maxMouseScrollX","width","_scrollWindow","_cancelWindowScroll","onDrag","stopDragging","onDragStop","item","removeItems","add","index","_deinitItem","removeAllItems","_handleMouseDown","which","$handle","_getItemHandle","currentTarget","is","closest","ignoreHandleSelector","_handleMouseMove","_mouseDist","minMouseDist","_handleMouseUp","scrollPos","removeData","CheckboxSelect","$all","$options","$checkboxes","filter","not","onAllChange","isAllChecked","checked","disabled","ContextMenu","options","$menu","showingMenu","counter","buildMenu","menuClass","$ul","appendTo","hasOwnProperty","option","$li","$a","label","onClick","mousedown","hideMenu","showMenu","showing","show","hide","Drag","targetItemWidth","targetItemHeight","targetItemPositionInDraggee","$draggee","otherItems","totalOtherItems","helpers","helperTargets","helperPositions","helperLagIncrement","updateHelperPosProxy","updateHelperPosFrame","lastMouseX","lastMouseY","_returningHelpersToDraggees","draggeeDisplay","setDraggee","findDraggee","_updateHelperPos","helperLagIncrementDividend","concat","toArray","singleHelper","_createHelper","removeDraggee","collapseDraggees","appendDraggee","$newDraggee","oldLength","newLength","draggeeVirtualMidpointX","draggeeVirtualMidpointY","getHelperTargetX","getHelperTargetY","returnHelpersToDraggees","$helper","display","visibility","callback","draggeeOffset","_showDraggee","onReturnHelpersToDraggees","$draggeeHelper","clone","copyDraggeeInputValuesToHelper","margin","pointer-events","helper","append","helperPos","_getHelperTarget","position","zIndex","helperBaseZindex","opacity","helperOpacity","_i","_j","_lag","helperLagBase","helperSpacingX","helperSpacingY","remove","DragDrop","$dropTargets","$activeDropTarget","updateDropTargets","dropTargets","_activeDropTarget","_elem","activeDropTargetClass","onDropTargetChange","fadeOutHelpers","duration","complete","DragMove","DragSort","$heightedContainer","$insertion","insertionVisible","oldDraggeeIndexes","newDraggeeIndexes","closestItem","_midpointVersion","_$prevItem","createInsertion","insertion","magnetStrength","_draggeeOffsetX","_draggeeOffsetY","canInsertBefore","$item","canInsertAfter","_getDraggeeIndexes","moveTargetItemToFront","_getItemIndex","first","insertBefore","_placeInsertionWithDraggee","_clearMidpoints","parent","_removeInsertion","_getClosestItem","_updateInsertion","insertAfter","onSortChange","onInsertionPointChange","indexes","_closestItem","_testForClosestItem","_midpoint","_getItemMidpoint","_startXDist","_lastXDist","abs","_startYDist","_lastYDist","_$otherItem","prev","_xDist","_yDist","last","next","_repositionDraggee","get","_moveDraggeeToItem","_$item","prependTo","_mouseDistX","_mouseDistY","_closestItemMouseDistY","_closestItemMouseDistX","EscManager","handlers","escapeLatest","register","obj","unregister","pop","escManager","HUD","$trigger","$fixedTriggerParent","$hud","$tip","$body","$header","$footer","$mainContainer","$main","$shade","orientation","updatingSizeAndPosition","windowWidth","windowHeight","mainWidth","mainHeight","bodyContents","onShow","onHide","onSubmit","activeHUDs","class","shadeClass","hudClass","tipClass","bodyClass","mainContainerClass","mainClass","updateBody","$parent","offsetParent","closeBtn","html","headerClass","footerClass","stopPropagation","closeOtherHUDs","hudID","updateRecords","updateSizeAndPosition","changed","force","updateSizeAndPositionInternal","triggerWidth","triggerHeight","triggerOffset","windowScrollLeft","windowScrollTop","scrollContainerTriggerOffset","scrollContainerScrollLeft","scrollContainerScrollTop","hudBodyWidth","hudBodyHeight","right","bottom","overflow-x","overflow-y","clearances","orientations","relevantSize","windowSpacing","triggerSpacing","tipClasses","maxHudBodyWidth","maxHudBodyHeight","minBodyWidth","minBodyHeight","triggerCenter","maxLeft","minLeft","tipLeft","tipWidth","maxTop","minTop","tipTop","toggle","submit","_handleSubmit","Menu","$anchor","menuId","_windowWidth","_windowHeight","_windowScrollLeft","_windowScrollTop","_anchorOffset","_anchorWidth","_anchorHeight","_anchorOffsetRight","_anchorOffsetBottom","_menuWidth","_menuHeight","addOptions","$menuList","role","aria-hidden","attachToElement","anchor","nodeName","optionKey","tabindex","selectOption","setPositionRelativeToAnchor","topClearance","bottomClearance","maxHeight","min","align","_alignCenter","rightClearance","leftClearance","_alignRight","_alignLeft","detach","onOptionSelect","selectedOption","MenuBtn","$btn","menu","btn","menuAnchor","aria-owns","aria-haspopup","aria-expanded","onMenuHide","onBlur","contains","activeElement","onKeyDown","$option","$currentOption","click","focusOption","onMouseDown","MixedInput","elements","focussedElement","blurTimeout","getElementIndex","isText","onFocus","setFocus","setCarotPos","addTextElement","text","TextElement","addElement","focussedElementIndex","selectionStart","selectionEnd","preVal","postVal","newText","removeElement","$prevElem","$nextElem","prevElemVal","newVal","blurFocussedElement","focus","focusPreviousElement","$from","focusNextElement","pos","parentInput","$stage","focussed","interval","padding","setWidth","getIndex","buildStage","getTextWidth","stageWidth","setInterval","checkInput","NiceText","clearInterval","getVal","setVal","onChange","Modal","visible","dragger","desiredWidth","desiredHeight","resizeDragger","resizeStartWidth","resizeStartHeight","setContainer","autoShow","instances","draggable","dragHandleSelector","resizable","$resizeDragHandle","_handleResizeStart","_handleResize","closeOtherModals","visibleModal","onFadeIn","hideOnShadeClick","hideOnEsc","quickShow","onFadeOut","quickHide","max","min-width","min-height","_width","getWidth","minGutter","_height","getHeight","_handleWindowResize","relativeElemPadding","$hint","$charsLeft","autoHeight","maxLength","showCharsLeft","showingHint","inputBoxSizing","minHeight","initialized","input","isVisible","initialize","getHeightForValue","updateHeight","hint","$hintContainer","charsLeftClass","updateCharsLeft","initializeIfVisible","showHint","hintFadeDuration","hideHint","onTextChange","border-top","border-right","border-bottom","border-left","padding-top","padding-right","padding-bottom","padding-left","-webkit-box-sizing","-moz-box-sizing","box-sizing","spaces","onHeightChange","updateHeightIfWidthChanged","_charsLeft","negativeCharsLeftClass","Pill","$outerContainer","$innerContainer","$btns","$selectedBtn","outerContainer","preventOutlineOnMouseFocus","select","selectNext","nextIndex","_getSelectedBtnIndex","selectPrev","prevIndex","Select","$selectedItems","$focusedItem","mousedownTarget","mouseUpTimeout","callbackFrame","$focusable","$first","$last","allowEmpty","checkboxMode","ignoreClick","deselectAll","getItemIndex","isSelected","selectItem","preventScroll","multi","setFocusableItem","focusItem","_selectItems","selectAll","selectRange","sliceFrom","sliceTo","deselectItem","_deselectItems","clearFirst","deselectOthers","toggleItem","_canDeselect","clearMouseUpTimeout","getFirstItem","getLastItem","isPreviousItem","isNextItem","getPreviousItem","getNextItem","getItemToTheLeft","horizontal","vertical","getClosestItem","getItemToTheRight","getItemAbove","getItemBelow","dir","step","axisProps","closestItemAxisProps","dirProps","closestItemDirectionProps","$thisItem","thisOffset","thisMidpoint","midpointOffset","midpointSizeFunc","otherRowPos","smallestMidpointDiff","$closestItem","$otherItem","otherOffset","isNextRow","rowOffset","otherMidpoint","midpointDiff","isWrongDirection","getFurthestItemToTheLeft","getFurthestItem","getFurthestItemToTheRight","getFurthestItemAbove","getFurthestItemBelow","$testItem","totalSelected","getTotalSelected","updateIndexes","itemsChanged","selectionChanged","selectedIndex","selectedClass","onSelectionChange","resetItemOrder","getSelectedItems","shiftKey","_actAsCheckbox","onMouseUp","<","b",">","SelectMenu","selected","build","_addSelectedOptionClass","dom","ul","className","setBtnText","$btnLabel","ulClass"],"mappings":"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","file":"garnish.min.js","sourcesContent":["/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n","/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        else {\n            // Both altKey and ctrlKey == true on some Windows keyboards when the right-hand ALT key is pressed\n            // so just be safe and make sure altKey == false\n            return (ev.ctrlKey && !ev.altKey);\n        }\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n","/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n","/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper.css({\n                width: $draggee.width() + 1, // Prevent the brower from wrapping text if the width was actually a fraction of a pixel larger\n                height: $draggee.height(),\n                margin: 0,\n                'pointer-events': 'none'\n            });\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n","/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * ESC key manager class\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n","/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n            this.addListener(this.$shade, 'tap,click', 'hide');\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n            Garnish.escManager.register(this, 'hide');\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            //this.windowWidth = null;\n            //this.windowHeight = null;\n            //this.scrollTop = null;\n            //this.scrollLeft = null;\n            //this.mainWidth = null;\n            //this.mainHeight = null;\n\n            delete Garnish.HUD.activeHUDs[this._namespace];\n\n            Garnish.escManager.unregister(this);\n\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu\n */\nGarnish.Menu = Garnish.Base.extend(\n    {\n        settings: null,\n\n        $container: null,\n        $options: null,\n        $anchor: null,\n\n        menuId: null,\n\n        _windowWidth: null,\n        _windowHeight: null,\n        _windowScrollLeft: null,\n        _windowScrollTop: null,\n\n        _anchorOffset: null,\n        _anchorWidth: null,\n        _anchorHeight: null,\n        _anchorOffsetRight: null,\n        _anchorOffsetBottom: null,\n\n        _menuWidth: null,\n        _menuHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, settings) {\n            this.setSettings(settings, Garnish.Menu.defaults);\n\n            this.$container = $(container);\n\n            this.$options = $();\n            this.addOptions(this.$container.find('a'));\n\n            // Menu List\n            this.menuId = 'menu' + this._namespace;\n            this.$menuList = $('ul', this.$container);\n            this.$menuList.attr({\n                'role': 'listbox',\n                'id': this.menuId,\n                'aria-hidden': 'true'\n            });\n\n            // Deprecated\n            if (this.settings.attachToElement) {\n                this.settings.anchor = this.settings.attachToElement;\n                Garnish.log('The \\'attachToElement\\' setting is deprecated. Use \\'anchor\\' instead.');\n            }\n\n            if (this.settings.anchor) {\n                this.$anchor = $(this.settings.anchor);\n            }\n\n            // Prevent clicking on the container from hiding the menu\n            this.addListener(this.$container, 'mousedown', function(ev) {\n                ev.stopPropagation();\n\n                if (ev.target.nodeName !== 'INPUT') {\n                    // Prevent this from causing the menu button to blur\n                    ev.preventDefault();\n                }\n            });\n        },\n\n        addOptions: function($options) {\n            this.$options = this.$options.add($options);\n            $options.data('menu', this);\n\n            $options.each(function(optionKey, option) {\n                $(option).attr({\n                    'role': 'option',\n                    'tabindex': '-1',\n                    'id': this.menuId + '-option-' + optionKey\n                });\n            }.bind(this));\n\n            this.addListener($options, 'click', function(ev) {\n                this.selectOption(ev.currentTarget);\n            });\n        },\n\n        setPositionRelativeToAnchor: function() {\n            this._windowWidth = Garnish.$win.width();\n            this._windowHeight = Garnish.$win.height();\n            this._windowScrollLeft = Garnish.$win.scrollLeft();\n            this._windowScrollTop = Garnish.$win.scrollTop();\n\n            this._anchorOffset = this.$anchor.offset();\n            this._anchorWidth = this.$anchor.outerWidth();\n            this._anchorHeight = this.$anchor.outerHeight();\n            this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n            this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n            this.$container.css('minWidth', 0);\n            this.$container.css('minWidth', this._anchorWidth - (this.$container.outerWidth() - this.$container.width()));\n\n            this._menuWidth = this.$container.outerWidth();\n            this._menuHeight = this.$container.outerHeight();\n\n            // Is there room for the menu below the anchor?\n            var topClearance = this._anchorOffset.top - this._windowScrollTop,\n                bottomClearance = this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n            if (bottomClearance >= this._menuHeight || (topClearance < this._menuHeight && bottomClearance >= topClearance)) {\n                this.$container.css({\n                    top: this._anchorOffsetBottom,\n                    maxHeight: bottomClearance - this.settings.windowSpacing\n                });\n            } else {\n                this.$container.css({\n                    top: this._anchorOffset.top - Math.min(this._menuHeight, topClearance - this.settings.windowSpacing),\n                    maxHeight: topClearance - this.settings.windowSpacing\n                });\n            }\n\n            // Figure out how we're aliging it\n            var align = this.$container.data('align');\n\n            if (align !== 'left' && align !== 'center' && align !== 'right') {\n                align = 'left';\n            }\n\n            if (align === 'center') {\n                this._alignCenter();\n            }\n            else {\n                // Figure out which options are actually possible\n                var rightClearance = this._windowWidth + this._windowScrollLeft - (this._anchorOffset.left + this._menuWidth),\n                    leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n                if (align === 'right' && leftClearance >= 0 || rightClearance < 0) {\n                    this._alignRight();\n                }\n                else {\n                    this._alignLeft();\n                }\n            }\n\n            delete this._windowWidth;\n            delete this._windowHeight;\n            delete this._windowScrollLeft;\n            delete this._windowScrollTop;\n            delete this._anchorOffset;\n            delete this._anchorWidth;\n            delete this._anchorHeight;\n            delete this._anchorOffsetRight;\n            delete this._anchorOffsetBottom;\n            delete this._menuWidth;\n            delete this._menuHeight;\n        },\n\n        show: function() {\n            // Move the menu to the end of the DOM\n            this.$container.appendTo(Garnish.$bod);\n\n            if (this.$anchor) {\n                this.setPositionRelativeToAnchor();\n            }\n\n            this.$container.velocity('stop');\n            this.$container.css({\n                opacity: 1,\n                display: 'block'\n            });\n\n            this.$menuList.attr('aria-hidden', 'false');\n\n            Garnish.escManager.register(this, 'hide');\n            this.addListener(Garnish.$scrollContainer, 'scroll', 'setPositionRelativeToAnchor');\n\n            this.trigger('show');\n        },\n\n        hide: function() {\n            this.$menuList.attr('aria-hidden', 'true');\n\n            this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION}, function() {\n                this.$container.detach();\n            }.bind(this));\n\n            Garnish.escManager.unregister(this);\n            this.removeListener(Garnish.$scrollContainer, 'scroll');\n\n            this.trigger('hide');\n        },\n\n        selectOption: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionselect', {selectedOption: option});\n            this.hide();\n        },\n\n        _alignLeft: function() {\n            this.$container.css({\n                left: this._anchorOffset.left,\n                right: 'auto'\n            });\n        },\n\n        _alignRight: function() {\n            this.$container.css({\n                right: this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n                left: 'auto'\n            });\n        },\n\n        _alignCenter: function() {\n            var left = Math.round((this._anchorOffset.left + this._anchorWidth / 2) - (this._menuWidth / 2));\n\n            if (left < 0) {\n                left = 0;\n            }\n\n            this.$container.css('left', left);\n        }\n\n    },\n    {\n        defaults: {\n            anchor: null,\n            windowSpacing: 5,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.Menu($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'role': 'combobox',\n                'aria-owns': this.menu.menuId,\n                'aria-haspopup': 'true',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    var $currentOption = this.menu.$options.filter('.hover');\n\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (!this.showingMenu) {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n            this.$btn.attr('aria-expanded', 'false');\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n","/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.register(this, 'hide');\n            }\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.unregister(this);\n            }\n\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n","/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.text(this.updateCharsLeft._charsLeft);\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Pill\n */\nGarnish.Pill = Garnish.Base.extend(\n    {\n        $outerContainer: null,\n        $innerContainer: null,\n        $btns: null,\n        $selectedBtn: null,\n        $input: null,\n\n        init: function(outerContainer) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a pill?\n            if (this.$outerContainer.data('pill')) {\n                Garnish.log('Double-instantiating a pill on an element');\n                this.$outerContainer.data('pill').destroy();\n            }\n\n            this.$outerContainer.data('pill', this);\n\n            this.$innerContainer = this.$outerContainer.find('.btngroup:first');\n            this.$btns = this.$innerContainer.find('.btn');\n            this.$selectedBtn = this.$btns.filter('.active:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            Garnish.preventOutlineOnMouseFocus(this.$innerContainer);\n            this.addListener(this.$btns, 'mousedown', 'onMouseDown');\n            this.addListener(this.$innerContainer, 'keydown', 'onKeyDown');\n        },\n\n        select: function(btn) {\n            this.$selectedBtn.removeClass('active');\n            var $btn = $(btn);\n            $btn.addClass('active');\n            this.$input.val($btn.attr('data-value'));\n            this.$selectedBtn = $btn;\n        },\n\n        selectNext: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[this.$btns.length - 1]);\n            }\n            else {\n                var nextIndex = this._getSelectedBtnIndex() + 1;\n\n                if (typeof this.$btns[nextIndex] !== 'undefined') {\n                    this.select(this.$btns[nextIndex]);\n                }\n            }\n        },\n\n        selectPrev: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[0]);\n            }\n            else {\n                var prevIndex = this._getSelectedBtnIndex() - 1;\n\n                if (typeof this.$btns[prevIndex] !== 'undefined') {\n                    this.select(this.$btns[prevIndex]);\n                }\n            }\n        },\n\n        onMouseDown: function(ev) {\n            this.select(ev.currentTarget);\n        },\n\n        _getSelectedBtnIndex: function() {\n            if (typeof this.$selectedBtn[0] !== 'undefined') {\n                return $.inArray(this.$selectedBtn[0], this.$btns);\n            }\n            else {\n                return -1;\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RIGHT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectNext();\n                    }\n                    else {\n                        this.selectPrev();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n\n                case Garnish.LEFT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectPrev();\n                    }\n                    else {\n                        this.selectNext();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$outerContainer.removeData('pill');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            if (preventScroll) {\n                var scrollLeft = Garnish.$scrollContainer.scrollLeft(),\n                    scrollTop = Garnish.$scrollContainer.scrollTop();\n                $item.focus();\n                Garnish.$scrollContainer.scrollLeft(scrollLeft).scrollTop(scrollTop);\n            }\n            else {\n                $item.focus();\n            }\n\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.Menu.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n","/**\n * Garnish UI toolkit\n *\n * @copyright 2013 Pixel & Tonic, Inc.. All rights reserved.\n * @author    Brandon Kelly <brandon@pixelandtonic.com>\n * @version   0.1.33\n * @license   MIT\n */\n(function($){\n\n/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n\n/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        else {\n            // Both altKey and ctrlKey == true on some Windows keyboards when the right-hand ALT key is pressed\n            // so just be safe and make sure altKey == false\n            return (ev.ctrlKey && !ev.altKey);\n        }\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n\n/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper.css({\n                width: $draggee.width() + 1, // Prevent the brower from wrapping text if the width was actually a fraction of a pixel larger\n                height: $draggee.height(),\n                margin: 0,\n                'pointer-events': 'none'\n            });\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n\n/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * ESC key manager class\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n\n/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n            this.addListener(this.$shade, 'tap,click', 'hide');\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n            Garnish.escManager.register(this, 'hide');\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            //this.windowWidth = null;\n            //this.windowHeight = null;\n            //this.scrollTop = null;\n            //this.scrollLeft = null;\n            //this.mainWidth = null;\n            //this.mainHeight = null;\n\n            delete Garnish.HUD.activeHUDs[this._namespace];\n\n            Garnish.escManager.unregister(this);\n\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu\n */\nGarnish.Menu = Garnish.Base.extend(\n    {\n        settings: null,\n\n        $container: null,\n        $options: null,\n        $anchor: null,\n\n        menuId: null,\n\n        _windowWidth: null,\n        _windowHeight: null,\n        _windowScrollLeft: null,\n        _windowScrollTop: null,\n\n        _anchorOffset: null,\n        _anchorWidth: null,\n        _anchorHeight: null,\n        _anchorOffsetRight: null,\n        _anchorOffsetBottom: null,\n\n        _menuWidth: null,\n        _menuHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, settings) {\n            this.setSettings(settings, Garnish.Menu.defaults);\n\n            this.$container = $(container);\n\n            this.$options = $();\n            this.addOptions(this.$container.find('a'));\n\n            // Menu List\n            this.menuId = 'menu' + this._namespace;\n            this.$menuList = $('ul', this.$container);\n            this.$menuList.attr({\n                'role': 'listbox',\n                'id': this.menuId,\n                'aria-hidden': 'true'\n            });\n\n            // Deprecated\n            if (this.settings.attachToElement) {\n                this.settings.anchor = this.settings.attachToElement;\n                Garnish.log('The \\'attachToElement\\' setting is deprecated. Use \\'anchor\\' instead.');\n            }\n\n            if (this.settings.anchor) {\n                this.$anchor = $(this.settings.anchor);\n            }\n\n            // Prevent clicking on the container from hiding the menu\n            this.addListener(this.$container, 'mousedown', function(ev) {\n                ev.stopPropagation();\n\n                if (ev.target.nodeName !== 'INPUT') {\n                    // Prevent this from causing the menu button to blur\n                    ev.preventDefault();\n                }\n            });\n        },\n\n        addOptions: function($options) {\n            this.$options = this.$options.add($options);\n            $options.data('menu', this);\n\n            $options.each(function(optionKey, option) {\n                $(option).attr({\n                    'role': 'option',\n                    'tabindex': '-1',\n                    'id': this.menuId + '-option-' + optionKey\n                });\n            }.bind(this));\n\n            this.addListener($options, 'click', function(ev) {\n                this.selectOption(ev.currentTarget);\n            });\n        },\n\n        setPositionRelativeToAnchor: function() {\n            this._windowWidth = Garnish.$win.width();\n            this._windowHeight = Garnish.$win.height();\n            this._windowScrollLeft = Garnish.$win.scrollLeft();\n            this._windowScrollTop = Garnish.$win.scrollTop();\n\n            this._anchorOffset = this.$anchor.offset();\n            this._anchorWidth = this.$anchor.outerWidth();\n            this._anchorHeight = this.$anchor.outerHeight();\n            this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n            this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n            this.$container.css('minWidth', 0);\n            this.$container.css('minWidth', this._anchorWidth - (this.$container.outerWidth() - this.$container.width()));\n\n            this._menuWidth = this.$container.outerWidth();\n            this._menuHeight = this.$container.outerHeight();\n\n            // Is there room for the menu below the anchor?\n            var topClearance = this._anchorOffset.top - this._windowScrollTop,\n                bottomClearance = this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n            if (bottomClearance >= this._menuHeight || (topClearance < this._menuHeight && bottomClearance >= topClearance)) {\n                this.$container.css({\n                    top: this._anchorOffsetBottom,\n                    maxHeight: bottomClearance - this.settings.windowSpacing\n                });\n            } else {\n                this.$container.css({\n                    top: this._anchorOffset.top - Math.min(this._menuHeight, topClearance - this.settings.windowSpacing),\n                    maxHeight: topClearance - this.settings.windowSpacing\n                });\n            }\n\n            // Figure out how we're aliging it\n            var align = this.$container.data('align');\n\n            if (align !== 'left' && align !== 'center' && align !== 'right') {\n                align = 'left';\n            }\n\n            if (align === 'center') {\n                this._alignCenter();\n            }\n            else {\n                // Figure out which options are actually possible\n                var rightClearance = this._windowWidth + this._windowScrollLeft - (this._anchorOffset.left + this._menuWidth),\n                    leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n                if (align === 'right' && leftClearance >= 0 || rightClearance < 0) {\n                    this._alignRight();\n                }\n                else {\n                    this._alignLeft();\n                }\n            }\n\n            delete this._windowWidth;\n            delete this._windowHeight;\n            delete this._windowScrollLeft;\n            delete this._windowScrollTop;\n            delete this._anchorOffset;\n            delete this._anchorWidth;\n            delete this._anchorHeight;\n            delete this._anchorOffsetRight;\n            delete this._anchorOffsetBottom;\n            delete this._menuWidth;\n            delete this._menuHeight;\n        },\n\n        show: function() {\n            // Move the menu to the end of the DOM\n            this.$container.appendTo(Garnish.$bod);\n\n            if (this.$anchor) {\n                this.setPositionRelativeToAnchor();\n            }\n\n            this.$container.velocity('stop');\n            this.$container.css({\n                opacity: 1,\n                display: 'block'\n            });\n\n            this.$menuList.attr('aria-hidden', 'false');\n\n            Garnish.escManager.register(this, 'hide');\n            this.addListener(Garnish.$scrollContainer, 'scroll', 'setPositionRelativeToAnchor');\n\n            this.trigger('show');\n        },\n\n        hide: function() {\n            this.$menuList.attr('aria-hidden', 'true');\n\n            this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION}, function() {\n                this.$container.detach();\n            }.bind(this));\n\n            Garnish.escManager.unregister(this);\n            this.removeListener(Garnish.$scrollContainer, 'scroll');\n\n            this.trigger('hide');\n        },\n\n        selectOption: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionselect', {selectedOption: option});\n            this.hide();\n        },\n\n        _alignLeft: function() {\n            this.$container.css({\n                left: this._anchorOffset.left,\n                right: 'auto'\n            });\n        },\n\n        _alignRight: function() {\n            this.$container.css({\n                right: this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n                left: 'auto'\n            });\n        },\n\n        _alignCenter: function() {\n            var left = Math.round((this._anchorOffset.left + this._anchorWidth / 2) - (this._menuWidth / 2));\n\n            if (left < 0) {\n                left = 0;\n            }\n\n            this.$container.css('left', left);\n        }\n\n    },\n    {\n        defaults: {\n            anchor: null,\n            windowSpacing: 5,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.Menu($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'role': 'combobox',\n                'aria-owns': this.menu.menuId,\n                'aria-haspopup': 'true',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    var $currentOption = this.menu.$options.filter('.hover');\n\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (!this.showingMenu) {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n            this.$btn.attr('aria-expanded', 'false');\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n\n/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.register(this, 'hide');\n            }\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.unregister(this);\n            }\n\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n\n/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.text(this.updateCharsLeft._charsLeft);\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Pill\n */\nGarnish.Pill = Garnish.Base.extend(\n    {\n        $outerContainer: null,\n        $innerContainer: null,\n        $btns: null,\n        $selectedBtn: null,\n        $input: null,\n\n        init: function(outerContainer) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a pill?\n            if (this.$outerContainer.data('pill')) {\n                Garnish.log('Double-instantiating a pill on an element');\n                this.$outerContainer.data('pill').destroy();\n            }\n\n            this.$outerContainer.data('pill', this);\n\n            this.$innerContainer = this.$outerContainer.find('.btngroup:first');\n            this.$btns = this.$innerContainer.find('.btn');\n            this.$selectedBtn = this.$btns.filter('.active:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            Garnish.preventOutlineOnMouseFocus(this.$innerContainer);\n            this.addListener(this.$btns, 'mousedown', 'onMouseDown');\n            this.addListener(this.$innerContainer, 'keydown', 'onKeyDown');\n        },\n\n        select: function(btn) {\n            this.$selectedBtn.removeClass('active');\n            var $btn = $(btn);\n            $btn.addClass('active');\n            this.$input.val($btn.attr('data-value'));\n            this.$selectedBtn = $btn;\n        },\n\n        selectNext: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[this.$btns.length - 1]);\n            }\n            else {\n                var nextIndex = this._getSelectedBtnIndex() + 1;\n\n                if (typeof this.$btns[nextIndex] !== 'undefined') {\n                    this.select(this.$btns[nextIndex]);\n                }\n            }\n        },\n\n        selectPrev: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[0]);\n            }\n            else {\n                var prevIndex = this._getSelectedBtnIndex() - 1;\n\n                if (typeof this.$btns[prevIndex] !== 'undefined') {\n                    this.select(this.$btns[prevIndex]);\n                }\n            }\n        },\n\n        onMouseDown: function(ev) {\n            this.select(ev.currentTarget);\n        },\n\n        _getSelectedBtnIndex: function() {\n            if (typeof this.$selectedBtn[0] !== 'undefined') {\n                return $.inArray(this.$selectedBtn[0], this.$btns);\n            }\n            else {\n                return -1;\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RIGHT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectNext();\n                    }\n                    else {\n                        this.selectPrev();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n\n                case Garnish.LEFT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectPrev();\n                    }\n                    else {\n                        this.selectNext();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$outerContainer.removeData('pill');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            if (preventScroll) {\n                var scrollLeft = Garnish.$scrollContainer.scrollLeft(),\n                    scrollTop = Garnish.$scrollContainer.scrollTop();\n                $item.focus();\n                Garnish.$scrollContainer.scrollLeft(scrollLeft).scrollTop(scrollTop);\n            }\n            else {\n                $item.focus();\n            }\n\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.Menu.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n\n})(jQuery);\n"]}